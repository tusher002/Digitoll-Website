/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
#include <bits/stdc++.h>

using namespace std;

static int slices = 16;
static int stacks = 16;
static int zoom = 0;
static int xx = 0;
static int yy = 0;
static int zz = 0;
static int ok = 0;
static int X = 0;
static int Z = 50;
static int Y = 0;
static double ll = 0;
static int angle = 0;

/* GLUT callback Handlers */

static void resize(int width, int height)
{
    const float ar = (float) width / (float) height;

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-ar, ar, -1.0, 1.0, 2.0, 100.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
}

void memorial()
{
    float x1=-.6,x2=.6,z1=.2,z0=0,y3=3,z3=0,z2=.2;
    for(int i = 0; i < 7; i++)
    {
        glColor3d(1,0,0);

        glBegin(GL_TRIANGLE_FAN);
            glVertex3f(0, 0, z0);
            glVertex3f(x1, 0, z1);

            glVertex3f(0, y3, z3);
            glVertex3f(x2, 0, z2);


        glEnd();

        glBegin(GL_TRIANGLE_FAN);
            glVertex3f(0, 0, z0-.1);
            glVertex3f(x1+.15, 0, z1);

            glVertex3f(0, y3+.15, z3-.1);
            glVertex3f(x2+.1, 0, z2);


        glEnd();

        glColor3d(.9, .9, .9);

        glBegin(GL_QUAD_STRIP);
            glVertex3f(x1+.15, 0, z1);
            glVertex3f(x1, 0, z1);
            glVertex3f(0, y3+.15, z3-.1);
            glVertex3f(0, y3, z3);
            glVertex3f(x2, 0, z2);
            glVertex3f(x2+.1, 0, z2);
        glEnd();
        z0 -= .38;
        x1 -= .5;
        x2 += .5;
        y3 -= .3;
        z3 -= .38;
        z2 += .08;
        z1 +=.08;
    }
}
void table()
{
    glColor3d(1,1,0);
    glBegin(GL_POLYGON);
        glVertex3f(-5, -0, -5);
        glVertex3f(-5, -0, 2.5);
        glVertex3f(5, -0, 2.5);
        glVertex3f(5, -0, -5);

    glEnd();


    glBegin(GL_QUADS);

        glVertex3f(-4.2,0,0);

        glVertex3f(-4,0,0);

        glVertex3f(-4,3,0);

        glVertex3f(-4.2,3,0);
    glEnd();

    glColor3d(0,1,0);
    glBegin(GL_QUADS);

        glVertex3f(-4,2.3,0);

        glVertex3f(-3.2,2.3,0);

        glVertex3f(-3.2,2.9,0);

        glVertex3f(-4,2.9,0);
    glEnd();

    glBegin(GL_QUADS);

        glVertex3f(-4,2.3,0);

        glVertex3f(-3.2,2.3,0);

        glVertex3f(-3.2,2.9,0);

        glVertex3f(-4,2.9,0);
    glEnd();




    glBegin(GL_POLYGON);
        glVertex3f(-5, -.2, -5);
        glVertex3f(-5, -.2, 2.5);
        glVertex3f(5, -.2, 2.5);
        glVertex3f(5, -.2, -5);

    glEnd();

    glColor3d(0,1,0);
    glBegin(GL_QUAD_STRIP);
            glVertex3f(-5, -0, -5);
            glVertex3f(-5, -.2, -5);
            glVertex3f(-5, -0, 2.5);
            glVertex3f(-5, -.2, 2.5);
            glVertex3f(5, -0, 2.5);
            glVertex3f(5, -.2, 2.5);
            glVertex3f(5, -0, -5);
            glVertex3f(5, -.2, -5);
            glVertex3f(-5, -0, -5);
            glVertex3f(-5, -.2, -5);
            glVertex3f(5, -0, -5);
            glVertex3f(5, -.2, -5);
    glEnd();

    glColor3d(0,0,1);
    glBegin(GL_QUAD_STRIP);
        glVertex3f(3, -.2, -2);
        glVertex3f(3, -3, -2);
        glVertex3f(3, -.2, .5);
        glVertex3f(3, -3, .5);
        glVertex3f(-3, -.2, .5);
        glVertex3f(-3, -3, .5);
        glVertex3f(-3, -.2, -2);
        glVertex3f(-3, -3, -2);

    glEnd();


}
void flag()
{
    glColor3d(1,0,0);
    glBegin(GL_POLYGON);
        glVertex3f(-3.7, 2.7, -0);
        glVertex3f(-3.65, 2.65, -0);
        glVertex3f(-3.55, 2.68, -0);
        glVertex3f(-3.6, 2.5, -0);
        glVertex3f(-3.5, 2.6, -0);
        glVertex3f(-3.7, 2.7, -0);
        glVertex3f(-3.65, 2.65, -0);
        glVertex3f(-3.55, 2.6, -0);
        glVertex3f(-3.6, 2.5, -0);
        glVertex3f(-3.5, 2.63, -0);
        glVertex3f(-3.65, 2.57, -0);
        glVertex3f(-3.55, 2.69, -0);
        glVertex3f(-3.6, 2.55, -0);
        glVertex3f(-3.5, 2.61, -0);
        glVertex3f(-3.7, 2.5, -0);
        glVertex3f(-3.68, 2.57, -0);

    glEnd();


}
void room()
{
   glColor3d(.5,0,.5);
    glBegin(GL_QUAD_STRIP);

        glVertex3f(12, -3, 5.5);
        glVertex3f(12, 10, 5.5);
        glVertex3f(12, -3, -12);
        glVertex3f(12, 10, -12);
        glColor3d(.5,1,.5);
        glVertex3f(-15, -3, -12);
        glVertex3f(-15, 10, -12);
        glVertex3f(-15, -3, 5.5);
        glVertex3f(-15, 10, 5.5);

    glEnd();


    glBegin(GL_QUAD_STRIP);

        glVertex3f(10, -3, 5.5);
        glVertex3f(10, 10, 5.5);
        glVertex3f(10, -3, -12);
        glVertex3f(10, 10, -12);
        glColor3d(.5,1,.5);
        glVertex3f(-13, -3, -12);
        glVertex3f(-13, 10, -12);
        glVertex3f(-13, -3, 5.5);
        glVertex3f(-13, 10, 5.5);

    glEnd();


    glBegin(GL_POLYGON);

        glColor3d(1,1,1);
        glVertex3f(10, -3, 5.5);
        glVertex3f(12, -3, 5.5);
        glVertex3f(12, 10, 5.5);
        glVertex3f(10, 10, 5.5);

    glEnd();

    glBegin(GL_POLYGON);

        glColor3d(1,1,1);
        glVertex3f(-15, -3, 5.5);
        glVertex3f(-13, -3, 5.5);
        glVertex3f(-13, 10, 5.5);
        glVertex3f(-15, 10, 5.5);

    glEnd();

    glBegin(GL_POLYGON);

        glColor3d(1,1,1);
        glVertex3f(-15, 10, 5.5);
        glVertex3f(-13, 10, 5.5);
        glVertex3f(-13, 10, -12);
        glVertex3f(-15, 10, -12);
    glEnd();

    glBegin(GL_POLYGON);

        glColor3d(1,1,1);
        glVertex3f(12, 10, 5.5);
        glVertex3f(10, 10, 5.5);
        glVertex3f(10, 10, -12);
        glVertex3f(12, 10, -12);
    glEnd();


    glColor3d(.8,.3,.5);
    glBegin(GL_QUAD_STRIP);
        glVertex3f(12, -3, -12);
        glVertex3f(-15, -3, -12);    //floor
        glVertex3f(12, -3, 5.5);
        glVertex3f(-15, -3, 5.5);

    glEnd();

    glColor3d(.8,.3,.5);
    glBegin(GL_QUAD_STRIP);
        glVertex3f(12, -3.7, -12);
        glVertex3f(-15, -3.7, -12);    //add--floor
        glVertex3f(12, -3.7, 5.5);
        glVertex3f(-15, -3.7, 5.5);

    glEnd();

    glBegin(GL_POLYGON);

        glColor3d(.7, .7, .7);
        glVertex3f(12, -3, 5.5);
        glVertex3f(12, -3.7, 5.5);
        glVertex3f(-15, -3.7, 5.5);
        glVertex3f(-15, -3, 5.5);
    glEnd();


}

static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 27 :

        case 'q':
            exit(0);
            break;

        case '+':
            slices++;
            stacks++;
            zoom++;
            break;

        case '-':
            if (slices>3 && stacks>3)
            {
                slices--;
                stacks--;
                zoom--;
            }
            break;

        case 'a':
            xx++;
            break;

        case 'd':
            xx--;
            break;

        case 'w':
            yy++;
            break;

        case 's':
            yy--;
            break;

        case 'z':
            zz++;
            break;

        case 'x':
            zz--;
            break;

        case 'c':
            //dis = sqrt((X)*(X)+(Z)*(Z));
            X = 50*sin(angle*3.1416/180);
            Z = 50*cos(angle*3.1416/180);
            angle = angle + 5;
            break;

        case 'v':
            //dis = sqrt((X)*(X)+(Z)*(Z));
            X = 50*sin(angle*3.1416/180);
            Z = 50*cos(angle*3.1416/180);
            angle = angle - 5;
            break;

        case 'e':
            xx = 0;
            yy = 0;
            zz = 0;
            X=0;
            Y=0;
            Z=50;
            zoom=0;
            angle=0;
            ok = 1;
            break;
    }

    glutPostRedisplay();
}

static void display(void)
{
    const double t = glutGet(GLUT_ELAPSED_TIME) / 1000.0;
    const double a = t*90.0;

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor3d(1,0,0);

    glPushMatrix();
//        glTranslated(0, -2, -12);
//        glRotated(0,0,0,0);
//        glRotated(a,1,0,0);
        if(ok==0)
        gluLookAt(X,Y,Z-zoom, 0+xx,0-yy,0-zz, 0,1,0);
        ll = 50-zoom;
        if(ok==1)
        {
           gluLookAt(0,0,50, 0,0,0, 0,1,0);
        }
        memorial();
        table();
        room();
        flag();
        ok=0;
    glPopMatrix();
    glutSwapBuffers();
}




static void idle(void)
{
    glutPostRedisplay();
}

const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };

/* Program entry point */

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);

    glutCreateWindow("GLUT Shapes");

    glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);

    glClearColor(1, 1, 1,1);
    glDisable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);

    glutMainLoop();

    return EXIT_SUCCESS;
}
